# Global Deployment Strategy for 100k Users
# Multi-region Kubernetes deployment

# Global Infrastructure
apiVersion: v1
kind: ConfigMap
metadata:
  name: global-config
data:
  # Global Configuration
  GLOBAL_REGIONS: "us-east-1,eu-west-1,ap-southeast-1"
  PRIMARY_REGION: "us-east-1"
  CDN_PROVIDER: "cloudflare"
  
  # Service Configuration
  GAME_SERVICE_REPLICAS: "100"
  ROOM_SERVICE_REPLICAS: "50"
  USER_SERVICE_REPLICAS: "30"
  CHAT_SERVICE_REPLICAS: "40"
  ANALYTICS_SERVICE_REPLICAS: "20"
  
  # Database Configuration
  MONGODB_SHARDS: "20"
  REDIS_NODES: "30"
  ELASTICSEARCH_NODES: "15"

---
# Primary Region (US East)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: raja-mantri-game-primary
  namespace: primary-region
spec:
  replicas: 50
  selector:
    matchLabels:
      app: raja-mantri-game
      region: primary
  template:
    metadata:
      labels:
        app: raja-mantri-game
        region: primary
    spec:
      containers:
      - name: game-service
        image: raja-mantri-game:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: REGION
          value: "us-east-1"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: primary-uri
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Secondary Region (EU West)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: raja-mantri-game-secondary
  namespace: secondary-region
spec:
  replicas: 30
  selector:
    matchLabels:
      app: raja-mantri-game
      region: secondary
  template:
    metadata:
      labels:
        app: raja-mantri-game
        region: secondary
    spec:
      containers:
      - name: game-service
        image: raja-mantri-game:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: REGION
          value: "eu-west-1"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: secondary-uri
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"

---
# Tertiary Region (AP Southeast)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: raja-mantri-game-tertiary
  namespace: tertiary-region
spec:
  replicas: 20
  selector:
    matchLabels:
      app: raja-mantri-game
      region: tertiary
  template:
    metadata:
      labels:
        app: raja-mantri-game
        region: tertiary
    spec:
      containers:
      - name: game-service
        image: raja-mantri-game:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: REGION
          value: "ap-southeast-1"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: tertiary-uri
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"

---
# Global Load Balancer
apiVersion: v1
kind: Service
metadata:
  name: raja-mantri-game-global
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: raja-mantri-game
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3001
  - protocol: TCP
    port: 443
    targetPort: 3001

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: raja-mantri-game-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: raja-mantri-game-primary
  minReplicas: 50
  maxReplicas: 200
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: concurrent_users
      target:
        type: AverageValue
        averageValue: "1000"

---
# MongoDB Sharded Cluster
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-shard
spec:
  serviceName: mongodb-shard
  replicas: 20
  selector:
    matchLabels:
      app: mongodb-shard
  template:
    metadata:
      labels:
        app: mongodb-shard
    spec:
      containers:
      - name: mongodb
        image: mongo:5.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        resources:
          requests:
            memory: "8Gi"
            cpu: "2000m"
          limits:
            memory: "16Gi"
            cpu: "4000m"
  volumeClaimTemplates:
  - metadata:
      name: mongodb-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi

---
# Redis Cluster
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
spec:
  serviceName: redis-cluster
  replicas: 30
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--cluster-enabled", "yes", "--cluster-config-file", "nodes.conf"]
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
# Monitoring Stack
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 3
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "2000m"

---
# Grafana Dashboard
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: password
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
